
/* RobotArm_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> RobotArm.idl

Example subscription of type RobotArmCommand automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs/<arch>/RobotArm_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/RobotArm_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/RobotArm_publisher <domain_id> 
objs/<arch>/RobotArm_subscriber <domain_id> 

On Windows:

objs\<arch>\RobotArm_publisher <domain_id>  
objs\<arch>\RobotArm_subscriber <domain_id>   

modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <iomanip>

#include <libusb-1.0/libusb.h>

#include "RobotArm.h"
#include "RobotArmSupport.h"
#include "ndds/ndds_cpp.h"


class RobotUSBInterface {
  private:
  libusb_device **devs ;

  public:
    RobotUSBInterface() {
        int r = libusb_init(NULL);
        if ( r < 0) {
            std::cerr << "Failed to initialize libusb" << std::endl;
        }
    }

    struct libusb_device_handle* open(uint16_t vendorID, uint16_t productID) {
        int r; 
        int i;
        int cnt;
        struct libusb_device_handle *devh = NULL;
        libusb_device *dev;

        cnt = libusb_get_device_list(NULL, &devs);
        if (cnt < 0) {
            std::cerr << "Error getting USB device lust " << cnt << std::endl;
            return devh;
        }

        while ((dev = devs[i++]) != NULL) {
            struct libusb_device_descriptor desc;
            r = libusb_get_device_descriptor(dev, &desc);
            if ( r < 0) {
                std::cerr << "Error getting device descriptor " << r << std::endl;
                return devh;
            }
            if (desc.idVendor == vendorID && desc.idProduct == productID) {
                std::cout << "Found device" << std::endl;
                break;
            }
        }
        if (dev == NULL) {
            std::cerr << "Device Not Found" << std::endl;
            return devh;
        }

        r = libusb_open(dev, &devh);
        if (r != 0) {
            std::cerr << "Error opening device " << r << std::endl;
        }
      
        return devh;
    }

    void close(struct libusb_device_handle *devh) {
        libusb_close(devh);
         devh = NULL;
    }

    int sendCmd(struct libusb_device_handle *devh, unsigned char* cmd, uint16_t length) {

        int r = libusb_control_transfer(devh, 0x40, 6, 0x100, 0, cmd, length, 0);

        if ( r != length) {
            std::cerr << "USB data transfer error : sent " << r << " of " << length << " bytes" << std::endl;
        }
        return r;
    }

    ~RobotUSBInterface() {
        if (devs != NULL) {
            libusb_free_device_list(devs, 1);
        }
        libusb_exit(NULL);
    }
};


class RobotArmCommandListener : public DDSDataReaderListener {
  public:
    virtual void on_requested_deadline_missed(
        DDSDataReader* /*reader*/,
        const DDS_RequestedDeadlineMissedStatus& /*status*/) {
			std::cout << "on_requested_deadline_missed called" << std::endl;
	}

    virtual void on_requested_incompatible_qos(
        DDSDataReader* /*reader*/,
        const DDS_RequestedIncompatibleQosStatus& /*status*/) {
				std::cout << "on_requested_incompatible_qos called" << std::endl;
		}

    virtual void on_sample_rejected(
        DDSDataReader* /*reader*/,
        const DDS_SampleRejectedStatus& /*status*/) {
				std::cout << "on_sample_rejected called" << std::endl;
		}

    virtual void on_liveliness_changed(
        DDSDataReader* /*reader*/,
        const DDS_LivelinessChangedStatus& /*status*/) {
				std::cout << "on_liveliness_changed called" << std::endl;
		}

    virtual void on_sample_lost(
        DDSDataReader* /*reader*/,
        const DDS_SampleLostStatus& /*status*/) {
				std::cout << "on_sample_lost called" << std::endl;
		}

    virtual void on_subscription_matched(
        DDSDataReader* /*reader*/,
        const DDS_SubscriptionMatchedStatus& /*status*/) {
				std::cout << "on_subscription_matched called" << std::endl;
		}

	virtual void on_data_available(DDSDataReader* reader) {}
};

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            std::cerr << "delete_contained_entities error %d" << retcode << std::endl;
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            std::cerr << "delete_participant error %d\n" << retcode << std::endl;
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        std::cerr << "finalize_instance error %d\n" << retcode << std::endl;
        status = -1;
    }
    */
    return status;
}


#define ARM_VENDOR  0x1267
#define ARM_PRODUCT 0
#define CMD_DATALEN 3


int moveRobot(RobotUSBInterface *robot, struct libusb_device_handle *devh, long sec, long nsec, unsigned char *cmd, int length) {

    unsigned char offCmd[] = {0,0,0};
    timespec req, rem;

    req.tv_sec = sec;
    req.tv_nsec = nsec;
    robot->sendCmd(devh, cmd, length);
    nanosleep(&req, &rem);
    robot->sendCmd(devh, offCmd, 3);
    return 0;
}




extern "C" int subscriber_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    RobotArmCommandListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    DDS_Duration_t wait_period = {4,0};
    int status = 0;
    struct libusb_device_handle *devh = NULL;
 
    unsigned char cmd[][3] = {{0,0,0},
                                {0,1,0},
                                {0,2,0},
                                {64,0,0},
                                {128,0,0},
                                {16,0,0},
                                {32,0,0},
                                {4,0,0},
                                {8,0,0},
                                {2,0,0},
                                {1,0,0},
                                {0,0,1},
                                {0,0,0}};



    RobotUSBInterface robot;

    devh = robot.open(ARM_VENDOR, ARM_PRODUCT);
    if (devh == NULL) {
         std::cerr << " Error opening USB device to communicate with Robot Arm\n";
         return -1;
    }

    /* To customize the participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        std::cerr << "create_participant error\n";
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        std::cerr << "create_subscriber error\n";
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = RobotArmCommandTypeSupport::get_type_name();
    retcode = RobotArmCommandTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        std::cerr << "register_type error %d\n" << retcode << std::endl;
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "RobotArmCommand",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        std::cerr << "create_topic error\n";
        subscriber_shutdown(participant);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new RobotArmCommandListener();

    /* To customize the data reader QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, reader_listener,
        DDS_STATUS_MASK_ALL & (!DDS_DATA_AVAILABLE_STATUS));
    if (reader == NULL) {
        std::cerr << "create_datareader error\n";
        subscriber_shutdown(participant);
        delete reader_listener;
        return -1;
    }

	    /* Get status conditions
     * ---------------------
     * Each entity may have an attached Status Condition. To modify the
     * statuses we need to get the reader's Status Conditions first.
     */
    DDSStatusCondition* status_condition = reader->get_statuscondition();
    if (status_condition == NULL) {
        std::cerr << "get_statuscondition error\n";
        subscriber_shutdown(participant);
        return -1;
    }

	    /* Set enabled statuses
     * --------------------
     * Now that we have the Status Condition, we are going to enable the
     * statuses we are interested in. In this case we only enabe on data 
     * available
     */
    retcode = status_condition->set_enabled_statuses(
        DDS_DATA_AVAILABLE_STATUS );
    if (retcode != DDS_RETCODE_OK) {
        std::cerr << "set_enabled_statuses error\n";
        subscriber_shutdown(participant);
        return -1;
    }

	/* Create and attach conditions to the WaitSet
    * -------------------------------------------
    * Finally, we create the WaitSet and attach the Status Conditions to it.
    */
    DDSWaitSet* waitset = new DDSWaitSet();

    retcode = waitset->attach_condition(status_condition);
    if (retcode != DDS_RETCODE_OK) {
        std::cerr << "attach_condition error\n";
        subscriber_shutdown(participant);
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        DDSConditionSeq active_conditions_seq;

		/* wait() blocks execution of the thread until one or more attached
        * Conditions become true, or until a user-specified timeout expires.
        */
        retcode = waitset->wait(active_conditions_seq, wait_period);
        /* We get to timeout if no conditions were triggered */
        if (retcode == DDS_RETCODE_TIMEOUT) {
            continue;
        } else if (retcode != DDS_RETCODE_OK) {
            std::cerr << "wait returned error: %d\n" << retcode << std::endl;
            break;
        }
		        /* Get the number of active conditions. Since we are
         * waiting for on data available only it will always be just 1  */
        int active_conditions = active_conditions_seq.length();

        for (int i = 0; i < active_conditions; ++i) {
            /* Now we compare the current condition with the Status
             * Conditions and the Read Conditions previously defined. If
             * they match, we print the condition that was triggered.*/

            /* Compare with Status Conditions */
            if (active_conditions_seq[i] == status_condition) {
				/* We got a notification for RobotArmCommand */
 				/* Narrow the reader into your specific data type */
			    RobotArmCommandDataReader *rc_reader = RobotArmCommandDataReader::narrow(reader);
				if (rc_reader == NULL) {
					std::cerr << "DataReader narrow error\n";
			        return -1;
				}
                DDS_StatusMask triggeredmask = rc_reader->get_status_changes();

                if (triggeredmask & DDS_DATA_AVAILABLE_STATUS) {
                    /* Current conditions match our conditions to read data, so
                     * we can read data just like we would do in any other
                     * example. */
                    RobotArmCommandSeq data_seq;
                    DDS_SampleInfoSeq info_seq;

                    retcode = rc_reader->take(
                        data_seq, info_seq, DDS_LENGTH_UNLIMITED, 
                        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, 
                        DDS_ANY_INSTANCE_STATE);
                    if (retcode != DDS_RETCODE_OK) {
                        std::cerr << "take error %d\n" << retcode << std::endl;
                        break;
                    }

                    for (int j = 0; j < data_seq.length(); ++j) {
                        if (!info_seq[j].valid_data) {
                            std::cout << "Got metadata\n";
                            continue;
                        }
                        RobotArmCommandTypeSupport::print_data(&data_seq[j]);
                        if ((data_seq[j].value == 9) | (data_seq[j].value == 10)) {
                            moveRobot(&robot, devh, 0, 50000000, cmd[data_seq[j].value], 3);
                        }
                        else if (data_seq[j].value == 11) {
                            libusb_control_transfer(devh, 0x40, 6, 0x100, 0, cmd[11], 3, 0);
                        }
                        else if ((data_seq[j].value >0) && (data_seq[j].value <=12)){
                            moveRobot(&robot, devh, 1, 0, cmd[data_seq[j].value], 3);
                        }
                   }
                   rc_reader->return_loan(data_seq, info_seq);
                }
            }
        }
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
    delete reader_listener;

    robot.close(devh);

    return status;
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return subscriber_main(domainId, sample_count);
}

